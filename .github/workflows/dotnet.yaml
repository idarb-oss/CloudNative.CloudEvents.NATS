name: dotnet

on:
  push:
    branches:
      - '**'

  pull_request:
    types:
      - opened
      - synchronize
      - reopened

    branches:
      - main

  release:
    types:
      - published

  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' ||
      github.event_name == 'pull_request'

    strategy:
      matrix:
        dotnet: [ '6.0.x' ]

    outputs:
      version: "${{ steps.version.outputs.majorMinorPatch }}"
      commitsSinceVersion: "${{ steps.version.outputs.commitsSinceVersionSourcePadded }}"
      sha: "sha.${{ steps.version.outputs.sha }}"

    name: Test dotnet ${{ matrix.dotnet }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ matrix.dotnet }}

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: '5.x'

      - name: Get Version
        id: version
        uses: gittools/actions/gitversion/execute@v0.9.7
        with:
          useConfigFile: true

      - name: Display GitVersion outputs
        run: |
          echo "Major: ${{ steps.version.outputs.major }}"
          echo "Minor: ${{ steps.version.outputs.minor }}"
          echo "Patch: ${{ steps.version.outputs.patch }}"
          echo "PreReleaseTag: ${{ steps.version.outputs.preReleaseTag }}"
          echo "PreReleaseTagWithDash: ${{ steps.version.outputs.preReleaseTagWithDash }}"
          echo "PreReleaseLabel: ${{ steps.version.outputs.preReleaseLabel }}"
          echo "PreReleaseNumber: ${{ steps.version.outputs.preReleaseNumber }}"
          echo "WeightedPreReleaseNumber: ${{ steps.version.outputs.weightedPreReleaseNumber }}"
          echo "BuildMetaData: ${{ steps.version.outputs.buildMetaData }}"
          echo "BuildMetaDataPadded: ${{ steps.version.outputs.buildMetaDataPadded }}"
          echo "FullBuildMetaData: ${{ steps.version.outputs.fullBuildMetaData }}"
          echo "MajorMinorPatch: ${{ steps.version.outputs.majorMinorPatch }}"
          echo "SemVer: ${{ steps.version.outputs.semVer }}"
          echo "LegacySemVer: ${{ steps.version.outputs.legacySemVer }}"
          echo "LegacySemVerPadded: ${{ steps.version.outputs.legacySemVerPadded }}"
          echo "AssemblySemVer: ${{ steps.version.outputs.assemblySemVer }}"
          echo "AssemblySemFileVer: ${{ steps.version.outputs.assemblySemFileVer }}"
          echo "FullSemVer: ${{ steps.version.outputs.fullSemVer }}"
          echo "InformationalVersion: ${{ steps.version.outputs.informationalVersion }}"
          echo "BranchName: ${{ steps.version.outputs.branchName }}"
          echo "EscapedBranchName: ${{ steps.version.outputs.escapedBranchName }}"
          echo "Sha: ${{ steps.version.outputs.sha }}"
          echo "ShortSha: ${{ steps.version.outputs.shortSha }}"
          echo "NuGetVersionV2: ${{ steps.version.outputs.nuGetVersionV2 }}"
          echo "NuGetVersion: ${{ steps.version.outputs.nuGetVersion }}"
          echo "NuGetPreReleaseTagV2: ${{ steps.version.outputs.nuGetPreReleaseTagV2 }}"
          echo "NuGetPreReleaseTag: ${{ steps.version.outputs.nuGetPreReleaseTag }}"
          echo "VersionSourceSha: ${{ steps.version.outputs.versionSourceSha }}"
          echo "CommitsSinceVersionSource: ${{ steps.version.outputs.commitsSinceVersionSource }}"
          echo "CommitsSinceVersionSourcePadded: ${{ steps.version.outputs.commitsSinceVersionSourcePadded }}"
          echo "UncommittedChanges: ${{ steps.version.outputs.uncommittedChanges }}"
          echo "CommitDate: ${{ steps.version.outputs.commitDate }}"

      - run: dotnet restore

      - run: dotnet build --no-restore --configuration Release

      - run: dotnet test --no-restore --verbosity normal /p:CollectCoverage=true /p:CoverletOutputFormat=opencover

      - name: Upload Coverage to Codecov;
        uses: codecov/codecov-action@v2

  release:
    runs-on: ubuntu-latest
    if: |
      !github.event.release.prerelease

    needs:
      - test

    strategy:
      matrix:
        dotnet: [ '6.0.x' ]

    name: Release dotnet ${{ marix.dotnet }}
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ matrix.dotnet }} # SDK Version to use.
          source-url: https://nuget.pkg.github.com/idarboss/index.json
        env:
          NUGET_AUTH_TOKEN: ${{secrets.NUGET_API_KEY}}

      - run: dotnet build --configuration Release /p:VersionPrefix=${{ test.outputs.version }} /p:InformationalVersion=${{ test.outputs.version }}-${{ test.outputs.sha }}

      - name: Create the package
        run: dotnet pack --configuration Release -o dist /p:PackageVersion=${{ test.outputs.version }}

      - name: Publish the package to GPR
        run: dotnet nuget push dist/*.nupkg

  pre-release:
    runs-on: ubuntu-latest
    if: |
      github.event.release.prerelease

    needs:
      - test

    strategy:
      matrix:
        dotnet: [ '6.0.x' ]

    name: Release dotnet ${{ marix.dotnet }}
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ matrix.dotnet }} # SDK Version to use.
          source-url: https://nuget.pkg.github.com/idarboss/index.json
        env:
          NUGET_AUTH_TOKEN: ${{secrets.NUGET_API_KEY}}

      - run: dotnet build --configuration Release /p:VersionPrefix=${{ test.outputs.version }} /p:VersionSuffix="preview" /p:InformationalVersion=${{ test.outputs.version }}-preview.${{ test.outputs.sha }}

      - name: Create the package
        run: dotnet pack --configuration Release -o dist /p:PackageVersion=${{ test.outputs.version }}-preview${{ test.outputs.CommitsSinceVersionSourcePadded }}

      - name: Publish the package to GPR
        run: dotnet nuget push dist/*.nupkg
